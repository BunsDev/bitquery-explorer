<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header"><%= t('tabs.address.graph.name') %></div>
      <div class="card-body" style="padding: 0">
          <div id="graph"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script>

    $( document ).ready(function() {
        var query = new widgets.query(`
        query ($network: <%= @network[:network_type] || 'EthereumNetwork!' %>, $address: String!, $limit: Int!, $currency: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {
  <%= @network[:protocol] || 'ethereum' %>(network: $network) {
    inbound: coinpath(receiver: {is: $address}, currency:{is: $currency}, options: {desc: "amount", limit: $limit}, date:{since: $from, till: $till}) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
    }
    outbound: coinpath(sender: {is: $address}, currency:{is: $currency}, options: {desc: "amount", limit: $limit}, date:{since: $from, till: $till}) {
      sender {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      receiver {
        address
        annotation
        smartContract {
          contractType
          currency {
            symbol
            name
          }
        }
      }
      amount
    }
  }
}
`);

        new widgets.template('#graph', query, '', {
            title: '<%= t('tabs.address.graph.name') %>',
            callback: function(domNode, data){
                widgets.jqueryLoading(function($){
                    let _ = widgets.lodash;
                    let _n = widgets.numeral;

                    let currencies = [<%= @currencies.collect{|cur| "{address:\"#{cur.address}\",symbol:\"#{cur.symbol}\",name:\"#{cur.name}\"}"}.join(',').html_safe %>];
                    let currency = (_.find(currencies,{address: query.variables.currency}) || currencies[0]).symbol;

                    this.prepareNodes = function(nodes){
                        let prepareNode = function(node){
                            if (node.address == '0x0000000000000000000000000000000000000000'){
                                return {
                                    id: node.address,
                                    label: 'Coinbase',
                                    group: 'coinbase',
                                    title: node.address
                                };
                            } else if(node.smartContract.contractType == 'Generic'){
                                return {
                                    id: node.address,
                                    label: _.truncate(node.address, {length: 15, separator: '...'}),
                                    group: 'smart_contract',
                                    title: 'Smart Contract ' + node.address
                                };
                            } else if(node.smartContract.contractType == 'Token' || node.smartContract.contractType == 'TokenSale'){
                                return {
                                    id: node.address,
                                    label: node.smartContract.currency.name +' ('+node.smartContract.currency.symbol+')',
                                    group: 'token',
                                    title: node.smartContract.currency.name +' ('+node.smartContract.currency.symbol+')' + ' ' + node.address
                                };
                            } else if(node.smartContract.contractType == 'MarginPositionToken'){
                                return {
                                    id: node.address,
                                    label: node.annotation || _.truncate(node.address, {length: 15, separator: '...'}),
                                    group: 'MarginPositionToken',
                                    title: 'MarginPositionToken ' + node.address
                                };
                            } else if(node.smartContract.contractType == 'Multisig'){
                                return {
                                    id: node.address,
                                    label: node.annotation || _.truncate(node.address, {length: 15, separator: '...'}),
                                    group: 'multisig',
                                    title: 'MultiSig Wallet ' + node.address
                                };
                            } else if(node.smartContract.contractType == 'DEX'){
                                return {
                                    id: node.address,
                                    label: node.annotation || _.truncate(node.address, {length: 15, separator: '...'}),
                                    group: 'dex',
                                    title: 'DEX ' + node.address
                                };
                            } else {
                                return {
                                    id: node.address,
                                    label: node.annotation || _.truncate(node.address, {length: 15, separator: '...'}),
                                    group: node.annotation ? 'annotated_address' : 'address',
                                    title: node.address
                                };
                            }
                        };

                        let prepared = [];
                        _.each(nodes, function(node){
                            prepared.push(prepareNode(node.receiver));
                            prepared.push(prepareNode(node.sender));
                        });
                        return prepared;
                    };

                    this.prepareEdges = function(edges, receiver = true, address = '<%= @address %>'){
                        let g = this;
                        let prepareEdge = function(edge){
                            let currency_name = currency;
                            let width_counts = Math.log(edge.transfers)+1;
                            let width = (edge.amount > 1) ? 1.5*Math.log10(edge.amount)+1 : 1;
                            let value = parseFloat(edge.amount)<=1e-6 ? edge.amount : _n(edge.amount).format('0.0000a');

                            let label = value + ' ' + currency_name;

                            if(receiver){
                                return {
                                    from: edge.sender.address,
                                    to: address,
                                    arrows: 'to',
                                    label: label,
                                    color: {color: '<%= dark? ? 'silver' : 'grey' %>', highlight: '#ff5722'},
                                    font: {align: 'middle', multi: true, color: '<%= dark? ? 'white' : 'black' %>', strokeWidth: 4, strokeColor: '<%= dark? ? 'black' : 'white' %>'},
                                    smooth: true,
                                    width: width,
                                    select_type: 'select_transfers',
                                    hidden: false,
                                    id: g.hashCode(['select_transfers', edge.sender.address, address, label])
                                }
                            } else {
                                return {
                                    from: address,
                                    to: edge.receiver.address,
                                    arrows: 'to',
                                    label: label,
                                    color: {color: '<%= dark? ? 'white' : 'black' %>', highlight: '#ff5722'},
                                    font: {align: 'middle', multi: true, color: '<%= dark? ? 'white' : 'black' %>', strokeWidth: 4, strokeColor: '<%= dark? ? 'black' : 'white' %>'},
                                    smooth: true,
                                    width: width,
                                    select_type: 'select_transfers',
                                    hidden: false,
                                    id: g.hashCode(['select_transfers', address, edge.receiver.address, label])
                                }
                            }
                        };
                        let prepared = [];
                        _.each(edges, function(edge){
                            prepared.push(prepareEdge(edge));
                        });
                        return prepared;
                    };

                    this.hashCode = function(data){
                        var string = JSON.stringify(data);
                        if (Array.prototype.reduce){
                            return string.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
                        }
                        var hash = 0;
                        if (string.length === 0) return hash;
                        for (var i = 0; i < string.length; i++) {
                            var character  = string.charCodeAt(i);
                            hash  = ((hash<<5)-hash)+character;
                            hash = hash & hash; // Convert to 32bit integer
                        }
                        return hash;
                    };

                    this.dataset = {
                        nodes: new vis.DataSet(_.uniqBy(this.prepareNodes(data.<%= @network[:protocol] || 'ethereum' %>.inbound).concat(this.prepareNodes(data.<%= @network[:protocol] || 'ethereum' %>.outbound)), 'id')),
                        edges: new vis.DataSet(_.uniqBy(this.prepareEdges(data.<%= @network[:protocol] || 'ethereum' %>.inbound).concat(this.prepareEdges(data.<%= @network[:protocol] || 'ethereum' %>.outbound, false)), 'id'))
                    };

                    this.options = {
                        height: '600px',
                        physics: {
                            stabilization: {
                                enabled: false,
                                iterations: 10,
                                onlyDynamicEdges: true
                            },
                            barnesHut: {
                                damping: 0.4,
                                avoidOverlap: 0.1,
                                springConstant: 0.09
                            }
                        },
                        groups: {
                            smart_contract: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf013',
                                    weight: 900,
                                    size: 40,
                                    color: '#f0a30a'
                                },
                                font:{
                                    color: '<%= dark? ? 'white' : 'black' %>'
                                }
                            },
                            multisig: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf4d3',
                                    weight: 900,
                                    size: 40,
                                    color: '#03a9f4'
                                },
                                font:{
                                    color: '<%= dark? ? 'white' : 'black' %>'
                                }
                            },
                            address: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf007',
                                    weight: 900,
                                    size: 40,
                                    color: '<%= dark? ? '#00dbb7' : '#009688' %>'
                                },
                                font:{
                                    color: '<%= dark? ? 'white' : 'black' %>'
                                }
                            },
                            annotated_address: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf007',
                                    weight: 900,
                                    size: 40,
                                    color: '<%= dark? ? '#00967b' : '#006650' %>',
                                },
                                font: {
                                    background: '<%= dark? ? '#00967b' : '#006650' %>',
                                    color: 'white'
                                }
                            },
                            token: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf51f',
                                    weight: 900,
                                    size: 40,
                                    color: '#ff5722'
                                },
                                font:{
                                    color: '<%= dark? ? 'white' : 'black' %>'
                                }
                            },
                            dex: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf021',
                                    weight: 900,
                                    size: 40,
                                    color: '#03a9f4'
                                },
                                font:{
                                    color: '<%= dark? ? 'white' : 'black' %>'
                                }
                            },
                            MarginPositionToken: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf1b2',
                                    weight: 900,
                                    size: 40,
                                    color: '#ff5722'
                                },
                                font:{
                                    color: '<%= dark? ? 'white' : 'black' %>'
                                }
                            },
                            coinbase: {
                                shape: 'icon',
                                icon: {
                                    face: 'FontAwesome',
                                    code: '\uf0ac',
                                    weight: 900,
                                    size: 40,
                                    color: '#03a9f4'
                                },
                                font:{
                                    color: '<%= dark? ? 'white' : 'black' %>'
                                }
                            }
                        }
                    };

                    this.draw = function(){
                        let g = this;
                        g.network = new vis.Network(domNode, this.dataset, this.options);
                        g.dataset.nodes.update({id: '<%= @address %>', physics: false, expanded: true});

                        g.network.on('dragEnd', function (t) {
                            _.each(t.nodes, function(node, i){
                                g.dataset.nodes.update({id: node, physics: false});
                            });
                        });

                        g.network.on('doubleClick', function(target){
                            if(target.nodes.length>0){
                                let node_id = target.nodes[0];
                                if(g.dataset.nodes.get(node_id).group!='coinbase'){
                                    g.expand(node_id);
                                }

                            }
                        });

                        g.network.on('oncontext', function(target){
                            if(target.nodes.length>0){
                                let node = g.dataset.nodes.get(target.nodes[0]);
                                if(node.group!='coinbase'){
                                    window.open('<%= locale_path_prefix %><%= @network[:network] %>'+'/address/'+node.id, '_blank');
                                }
                            }
                        });

                    };

                    this.expand = function(address){
                        let g = this;
                        if(!g.dataset.nodes.get(address).expanded){
                            g.dataset.nodes.update({id: address, physics: false, expanded: true});
                            query.request({
                                network: '<%= params['network']['network'] %>',
                                address: address
                            }, function(result){
                                _.each(_.uniqBy(g.prepareNodes(result.<%= @network[:protocol] || 'ethereum' %>.inbound).concat(g.prepareNodes(result.<%= @network[:protocol] || 'ethereum' %>.outbound)), 'id'), function(node){
                                    if(!g.dataset.nodes.get(node.id)){
                                        g.dataset.nodes.add(node);
                                    }
                                });
                                _.each(g.prepareEdges(result.<%= @network[:protocol] || 'ethereum' %>.inbound, true, address).concat(g.prepareEdges(result.<%= @network[:protocol] || 'ethereum' %>.outbound, false, address)), function(edge){
                                    if(!g.dataset.edges.get(edge.id)){
                                        g.dataset.edges.add(edge);
                                    }
                                });

                            }, false);
                        }
                    };

                    this.draw();

                    let jqWrapper = $(domNode);

                    jqWrapper.css({
                        position: 'relative'
                    });

                    this.detailLevel = function(wrap, limit){
                        let graphDetalLevel = $('<div><span>Detail level</span>' +
                            '<div><i class="fas fa-th-large"></i> <input type="range" min="1" max="100" step="1" value="'+limit+'" title="Detail level"> <i class="fas fa-th"></i></div>' +
                            '</div>');
                        wrap.append(graphDetalLevel);
                        graphDetalLevel.css({
                            position: 'absolute',
                            top: '20px',
                            right: '20px',
                            maxWidth: '60%'
                        });
                        graphDetalLevel.find('input').val(query.variables.limit);

                        let val = $('<div style="width:40px;height:25px;position:absolute;border:1px solid black;background-color:<%= dark? ? "#434e57" : "white" %>;text-align:center"></div>');
                        graphDetalLevel.find('input').on('mousedown', function(e){
                            $('body').append(val);
                            val.css({left: e.pageX-20, top: e.pageY-40});
                            val.html($(this).val());
                            $(this).on('mousemove', function(e){
                                let it = $(this);
                                val.css({left: e.pageX-20, top: e.pageY-40});
                                val.html($(this).val());
                            });
                        }).on('mouseup', function(e){
                            val.remove();
                            $(this).off('mousemove');
                        });

                        graphDetalLevel.find('input').on('change', function(){
                            let it = $(this);
                            query.request({
                                network: '<%= params['network']['network'] %>',
                                address: '<%= @address %>',
                                limit: parseInt(it.val())
                            });
                        });
                    };
                    this.detailLevel(jqWrapper, query.variables.limit);

                    this.fullScreen = function(wrap){
                        let g = this;
                        let fullscreen = $(wrap.parents('div')[1]);
                        let links = fullscreen.find('.widgets-links');
                        $(wrap.parents('div')[0]).height('100%');
                        wrap.height('100%');
                        let fullScreenButton = fullscreen.hasClass('graph-fullscreen') ? $('<div title="Minimize"><i class="fas fa-compress"></i></div>') : $('<div title="Fullscreen"><i class="fas fa-expand"></i></div>');

                        links.css({
                            position: 'absolute',
                            bottom: '20px',
                            right: '20px'
                        });

                        wrap.append(fullScreenButton);

                        fullScreenButton.css({
                            position: 'absolute',
                            right: '20px',
                            bottom: '50px',
                            color: '<%= dark? ? 'silver' : 'gray' %>'
                        });

                        fullScreenButton.find('i').css({fontSize: '25px'});

                        fullScreenButton.find('.fas').on('click', function(){
                            let it = $(this);
                            if(fullscreen.hasClass('graph-fullscreen')){
                                g.network.setOptions({height:'600px'});
                                fullscreen.removeClass('graph-fullscreen');
                                fullscreen.css({
                                    position: 'relative',
                                    top: 0,
                                    left: 0,
                                    width: '100%',
                                    height: '100%',
                                    zIndex: 100,
                                    backgroundColor: 'transparent'
                                });
                                it.addClass('fa-expand');
                                it.removeClass('fa-compress');
                            } else {
                                g.network.setOptions({height:'100%'});
                                fullscreen.addClass('graph-fullscreen');
                                fullscreen.css({
                                    position: 'fixed',
                                    top: 0,
                                    left: 0,
                                    width: '100%',
                                    height: '100%',
                                    zIndex: 1000,
                                    backgroundColor: '<%= dark? ? '#434e57' : 'white' %>'
                                });
                                it.addClass('fa-compress');
                                it.removeClass('fa-expand');
                            }
                        });
                    };
                    this.fullScreen(jqWrapper);

                    this.currencyFilter = function(wrap, currencies){
                        let select = $('<div>Show currency transfers' +
                            '<div><select style="width:100%"></select></div>' +
                            '</div>');
                        _.each(currencies, function(c){
                            let value = c.address === '-' ? c.symbol : c.address;
                            select.find('select').append('<option value="'+value+'" '+(value == query.variables.currency ? 'selected=selected' : '')+'>'+c.name+' ('+c.symbol+')</option>');
                        });
                        wrap.append(select);
                        select.css({
                            position: 'absolute',
                            top: '20px',
                            left: '20px',
                            maxWidth: '30%'
                        });

                        select.find('select').on('change', function(){
                            let it = $(this);
                            query.request({
                                network: '<%= params['network']['network'] %>',
                                address: '<%= @address %>',
                                currency: it.val()
                            });
                        });
                    };
                    this.currencyFilter(jqWrapper, currencies);
                });
            }
        });

        queryWithTimeRange(rr, query, <%= @from.html_safe %>,<%= @till.html_safe %>,{
            network: '<%= params['network']['network'] %>',
            address: '<%= @address %>',
            currency: '<%= @currencies.first && (@currencies.first.address == '-' ? @currencies.first.symbol : @currencies.first.address) %>'
        });
    });

</script>